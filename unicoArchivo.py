#--------------------------------------------------------------------------------------------------------------
#Librerias
import datetime #IMPORTADA BIBLIOTECA DATETIME, con el fin de trabajar con fechas y horas.
import random 
import os #Biblioteca para usar la terminar
import json #Biblioteca para usar Json
import hashlib #Biblioteca para usar un numero unico generado.
#---------------------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------------------------
#Habitaciones Informacion General

#Tipo de habitacion:

#Cada tipo de habitacion tiene 3 unidades cada una 
#habitaciones normales de 2 persons == 1
#habitaciones normales de 4 persons == 2
#habitaciones premium de 2 persons == 3
#habitaciones premium de 4 persons == 4

#Estado de Habitaciones:
#0 libre 1 ocupado
#---------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------
#FUNCIONES DE HABITACIONES

#Se Trae el conjunto de habitaciones del documento json habitaciones .json, el mismo se utilizara para mostrar el nombre de habitaciones
#Y su posterior re escritura a la hora de reservar una habitacion
def cargar_habitaciones():
    with open('habitaciones.json', 'r') as file:
        habitaciones = json.load(file)
    return habitaciones

#Sobre escribir el diccionario post reserva 
def guardar_habitaciones(habitaciones):
    with open('habitaciones.json', 'w') as file:
        json.dump(habitaciones, file, indent=4)

#Funcion Mostar habitaciones, Muestra todo el Array textual se presente en ese momento la utilizamos para la opcion mostrar habitaciones del menu
def mostrar_habitaciones(habitaciones):
    for habitacion in habitaciones:
        print(f"- {habitacion['numeroHabitacion']} (tipo: {habitacion['tipoHabitacion']}, valor: {habitacion['valor']}, personas: {habitacion['cantidadPersonas']},nombreHabitacion:{habitacion['nombreHabitacion']}, estado: {habitacion['estado']}), reservas: {habitacion['reservas']}")

def verificar_disponibilidad(fecha_ingreso, fecha_salida, n_reserva):
    
    for reserva in reservas:
        if reserva['NumeroHabitacion'] == n_reserva:
            fecha_ingreso_existente = datetime.strptime(reserva['Fecha_ingreso'], "%Y-%m-%d").date()
            fecha_salida_existente = datetime.strptime(reserva['Fecha_salida'], "%Y-%m-%d").date()

            # Verificar solapamiento o contig√ºidad de fechas
            if fecha_ingreso <= fecha_salida_existente and fecha_salida >= fecha_ingreso_existente:
                print("No se puede reservar. Las fechas de la nueva reserva se solapan o tocan una reserva existente.")
                return False
    
    print("La habitaci√≥n est√° disponible para las fechas solicitadas ‚úî.")
    return True

#Funcion Mostrar habitaciones, la utilizamos para mostrar el numero de cuartos a la hora de hacer una reserva, los cuartos mostrados dependeran
#de si ya se encuentran reservadas, estado 1 (Solo mostramos estados 0s) y Segun la cantidad de acompa;antes declarados dentro de ella
#se encuentra la funcion cambiar_estado
def asignar_habitacion(habitaciones, num_acompanantes,fecha_ingreso,fecha_salida):
    # Si hay menos de 2 acompa√±antes, mostrar todas las habitaciones
    print("==================================")
    print("|          Habitaciones          |")
    print("| Numero  -   Nombre   -    Tipo |")
    print("----------------------------------")

    if num_acompanantes < 2:
        for habitacion in habitaciones:
            if habitacion['cantidadPersonas'] == 2:
                print(f"-",habitacion['numeroHabitacion'],"‚ú¶",habitacion['nombreHabitacion'],"ÔΩû",habitacion['tipoHabitacion'])
    # Si hay 2 o m√°s acompa√±antes, mostrar solo habitaciones con capacidad para 4 personas
    else:
        for habitacion in habitaciones:
            if habitacion['cantidadPersonas'] == 4:
                print(f"-",habitacion['numeroHabitacion'],"‚ú¶",habitacion['nombreHabitacion'],"ÔΩû",habitacion['tipoHabitacion'])
    
    print("==================================")
    print("| Fecha de estadia de la reserva |")
    print("| Anio    -     Mes     -    Dia |")
    print("----------------------------------")
    print("|",fecha_ingreso," Al ",fecha_salida,"|")
    print("==================================")

    habitacion_valida = False  # Variable de control

    while not habitacion_valida:
        asignar_n_habitacion = input("Ingrese el n√∫mero de la habitaci√≥n: ")  # Convertir a string

        # Si hay menos de 2 acompa√±antes, buscamos habitaciones de capacidad 2
        if num_acompanantes < 2:
            for habitacion in habitaciones:
                if habitacion['cantidadPersonas'] == 2 and asignar_n_habitacion == habitacion['numeroHabitacion']:
                    if verificar_disponibilidad(fecha_ingreso,fecha_salida,asignar_n_habitacion):
                        print("Se ingres√≥ la habitaci√≥n ‚úî.")
                        habitacion_valida = True
        
        # Si hay 2 o m√°s acompa√±antes, buscamos habitaciones de capacidad 4
        else:
            for habitacion in habitaciones:
                if habitacion['cantidadPersonas'] == 4 and asignar_n_habitacion == habitacion['numeroHabitacion']:
                    if verificar_disponibilidad(fecha_ingreso,fecha_salida,asignar_n_habitacion):
                        print("Se ingres√≥ la habitaci√≥n ‚úî.")
                        habitacion_valida = True
        
        # Revisar si no se encontr√≥ una habitaci√≥n v√°lida
        if not habitacion_valida :
            print("- Ingrese un numero de habitacion valido -")
    
    return asignar_n_habitacion

    
#La funcion cambiar estado hace que cuando se seleccione un cuarto de los mostrados por nombre habitacion cambia su estado a 1 1== ocupado de esta
#forma cuando ejecutemos la busqueda de cuartos disponibles solo se mostraran los que tengan 0 es decir sin reservas 
# def cambiar_estado():
    
#     elegirHabitacion = int(input("Ingrese la habitacion que desea:"))
#     for habitacion in habitaciones:
#         if habitacion["numeroHabitacion"] == elegirHabitacion:
#             habitacion["estado"] = 1
#             return f"Estado de la habitaci√≥n {elegirHabitacion} cambiado a 1"
#         else:
#             print("valor invalido asigne una habitacion valida")
#             cambiar_estado();   

#----------------------------------------------------------------------------------------------------------------------------------------------


#ME PUEDEN DECIR PARA QUE ES ESTO ES UN COMMENT?


#-----------------------------------------------------------------------------------------------------------------------------------
#FUNCIONES DE RESERVA 

#Funcion guardar reserva en archivo VALIDAR SI LA SEGUIMOS USANDO O NO

def leer_reservas():
    try:
        with open("reservas.json", "r") as archivo:
            reservas = json.load(archivo)
    except (FileNotFoundError, json.JSONDecodeError):
        reservas = []  # Si el archivo no existe o est√° vac√≠o, usar una lista vac√≠a
    return reservas

def guardar_reservas(reservas):
    with open("reservas.json", "w") as archivo:
        json.dump(reservas, archivo, indent=4, default=str) 

def agregar_reserva(nueva_reserva):
    reservas = leer_reservas()
    reservas.append(nueva_reserva)
    guardar_reservas(reservas)

#----------------------------------------------------------------------------------------------------------------------------------
#FUNCIONES DE MENU

#Menu para buscar Habitaciones 
# def buscarMenu():

# #Funcion Menu Ejecutadora del proyecto
#     bandera = True

    
#     while bandera:

#         print("============================================== ")
#         print("‚îá                üè® BUSCAR üè®               ‚îá ")
#         print("============================================== ")
#         print("‚îá                                            ‚îá ")
#         print("‚îá         1. Buscar x Numero de Reserva      ‚îá ")
#         print("‚îá         2. Buscar x Nombre y Apellido      ‚îá ")
#         print("‚îá         3. Buscar x Habitacion             ‚îá ")
#         print("‚îá         4. Buscar x Fecha de Reserva       ‚îá ")
#         print("‚îá         5. Buscar x Fecha de Estancia      ‚îá ")
#         print("‚îá         6. Buscar x Rango de Fechas        ‚îá ")
#         print("‚îá         7. Buscar x Estado de Reserva      ‚îá ")
#         print("‚îá         8. Buscar x Tipo de Habitaci√≥n     ‚îá ")
#         print("‚îá         9. Buscar x N√∫mero de Hu√©spedes    ‚îá ")
#         print("‚îá         10. Buscar x M√©todo de Pago        ‚îá ")
#         print("‚îá                                            ‚îá ")
#         print("‚îá                 0. SALIR                   ‚îá ")
#         print("‚îá                                            ‚îá ")
#         print("============================================== ")

#         opcion = int(input("Seleccione una opci√≥n del men√∫ ‚û°  "))

#         if opcion >= 10 or opcion <= 0:
#             print("‚úï El numero que ingresaste no esta en el rango de opciones. ‚úï")

def menu():
    


    bandera = True  # Con esta bandera controlamos el ciclo principal del men√∫.

    while bandera:
        # Mostrar el men√∫
        print("============================================ ")
        print("‚îá       üè® BIENVENIDOS AL SISTEMA üè®      ‚îá ")
        print("============================================ ")
        print("‚îá                                          ‚îá ")
        print("‚îá         1. Registrar Ingreso             ‚îá ")
        print("‚îá         2. Ver Habitaciones              ‚îá ")
        print("‚îá         3. Buscar                        ‚îá ")
        print("‚îá         4. Checkout                      ‚îá ")
        print("‚îá                                          ‚îá ")
        print("‚îá                 0. SALIR                 ‚îá ")
        print("‚îá                                          ‚îá ")
        print("============================================ ")

        # Inicializamos la variable de respuesta en None
        respuesta = None

        # Validamos la entrada del usuario
        try:
            respuesta = int(input("Seleccione una opci√≥n del men√∫ ‚û°  "))
        except ValueError:
            print(" ---------------------------------------  ")
            print(" Error - No se ingres√≥ un n√∫mero v√°lido. ")
            print(" ---------------------------------------  ")
            input("Presione Enter para continuar...")
            os.system('cls' if os.name == 'nt' else 'clear')

        if respuesta == 1:  # Registrar el Ingreso.
            reserva = funcionIngreso()
            if reserva != None:
                agregar_reserva(reserva)
        elif respuesta == 2:  # Ver habitaciones.
            print("Habitaciones actuales:")
            mostrar_habitaciones(habitaciones)
        elif respuesta == 3:  # Buscar.
            buscarMenu()
        elif respuesta == 4:  # Checkout.
            realizarCheckout()
        elif respuesta == 0:  # Salir del programa.
            bandera = False
            print("Saliendo del sistema. ¬°Hasta luego!")
        else:
            if respuesta is not None:  # Solo mostrar si la respuesta no fue None
                print("‚úï Por favor, ingrese un n√∫mero v√°lido del (0 - 4). ‚úï")
                input("Presione Enter para continuar...")
                os.system('cls' if os.name == 'nt' else 'clear')

#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------
#FUNCIONES DE INGRESO 1.0

#Ingreso y validacion de datos basicos para el diccionario de huespedes
def funcionIngreso(): 
    
    #----------------------------------------------------------------------------------
    #Parte 1 Ingreso de los valores basicos del titular por medio de funciones

    print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
    print("======= INGRESE LOS DATOS DEL TITULAR DE LA RESERVA =======")
    print("=========================================================== ")
    
    nombre = verificar_nombre()
    apellido = verificar_apellido()
    nacionalidad = verificar_nacionalidad()
    dni_pasaporte = verificar_dni(nacionalidad)
    correo = verificar_correo()
    numero = verificar_numero()
    fecha_ingreso = verificar_fecha_ingreso()
    fecha_salida = verificar_fecha_salida(fecha_ingreso)
    edad = "Mayor"
    
    

    print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
    print("=== Estas seguro que quieres guardar los datos del titular? ===")
    print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
        
    regresar = input("=== Ingrese No/n . Si quieres seguir ingrese cualquier caracter. === ‚ûû  ")
    print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
    
    #Reset a la consola  
    if regresar.lower() == 'n' or regresar.lower() == 'no':
        print("Sin guardar datos...")
        return None

    os.system('cls' if os.name == 'nt' else 'clear')

    print("Se ingreso correctamente el Titular ‚úî ")
    
    #--------------------------------------------------------------------------------------------------------
    
    #Parte 2 Acompanientes, se valida si huesped viene con acompanientes 
    
    huespedes = acompaniantes() 
    numeros_de_huespedes = len(huespedes)

    #--------------------------------------------------------------------------------------------------------
    #Nombre Habitaciones printea el nombre de todos los cuartos
    #Se guardan todos los input en un diccionario.
    # 

    os.system('cls' if os.name == 'nt' else 'clear')

    ingresar_habitacion = asignar_habitacion(habitaciones,numeros_de_huespedes,fecha_ingreso,fecha_salida)

    codigoReserva = generar_codigo_reserva(nombre,fecha_ingreso,ingresar_habitacion)

    print("==========================================")
    print("El numero de reserva es : ", codigoReserva)
    print("==========================================")

    reserva = { 
        'Nombre': nombre,
        'Apellido': apellido,
        'Documento': dni_pasaporte,
        'Nacionalidad': nacionalidad,
        'Correo': correo,
        'Numero tel': numero,
        'Fecha_ingreso': fecha_ingreso,
        'Fecha_salida': fecha_salida,
        'Edad': edad,
        'NumeroHabitacion': ingresar_habitacion,
        'CodigoReserva' : codigoReserva,
        #Se almacena acompaniantes en caso de existir
        'Acompanantes' : huespedes
    }
    
    #---------------------------------------------------------------------------------------------------------
    #Parte 3 Seleccion de Habitaciones, la funcion labura con el diccionario previamente llamado del .json 

    return reserva

#Ingreso y validacion de acompanientes en caso de que exista
def acompaniantes(): 

    option = input("¬øVas a ir con alg√∫n acompa√±ante? (Si/No) ‚ûû  ").lower() #Preguntamos si va a ir solo o con alguien mas.

    if option == "si" or option == "s":
                                        
        acompaniantes = ingresar_acompanantes() #Llamamos a la funcion. Si tiene acompaniantes.

        os.system('cls' if os.name == 'nt' else 'clear')
        print("Se ingreso correctamente los acompa√±antes ‚úî ")
        return acompaniantes
    else: #Si no se ingresa ningun acompaniante, quedara la lisa sin acompaniantes.
        os.system('cls' if os.name == 'nt' else 'clear')
        print("No se ingresaron acompaniantes X ")
        return "-"  #Devuelve el huesped con los acompaniantes o sin.

#Si existen acompanientes se valida el numero
def ingresar_acompanantes(): 
    bandera = True
    acompanantes = [] #Se hace una lista con los diccionarios de los acompaniantes.
    max_acompanantes = 3 #El maximo de los acompaniantes es 3, ya que nuestras habitaciones maximo de 4 personas (Ingresante + Acompaniantes).

    while bandera:

        

        try:
            print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")
            print("===== INGRESE LOS DATOS DE LOS ACOMPANIANTES DE LA RESERVA =====") 
            print("‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï")

            num_acompanantes = int(input("¬øCu√°ntas personas m√°s har√°n la reserva junto a usted? (1 - 3 Personas): "))

            if 1 <= num_acompanantes or num_acompanantes <= max_acompanantes: #Si ingresamos el numero (1 - 3).
                for i in range(num_acompanantes): 
                    print(f" Ingresando datos del acompa√±ante „Äê {i + 1} „Äë") 
                    nombre = verificar_nombre()
                    apellido = verificar_apellido()
                    acompanante = nombre + " " + apellido

                    acompanantes.append(acompanante) #Se va agregando a la lista.

                    bandera = False #Sale de la bandera.
            else:
                print("x Por favor, ingrese un n√∫mero v√°lido de acompa√±antes (1 a 3) x") 

        except ValueError:
            os.system('cls' if os.name == 'nt' else 'clear')
            print(" ---------------------------------------  ")
            print(" Error - No se ingres√≥ un n√∫mero v√°lido. ")
            print(" ---------------------------------------  ")
        
        

        
    
    
    

    return acompanantes
    
#!!!!!!!!!!!!!!!!!!!!!hay que re escribir esto porque ahora toda la seleccion de cuarto (la que modifica el estado en el json) se hace con la funcion nombre_habitacion!!!!!!!!!!!!!!!!!
def generar_codigo_reserva(nombre,fecha_ingreso,numeroHabitacion):
    # Concatenamos el nombre, fecha de ingreso y n√∫mero de habitaci√≥n
    info_reserva = f"{nombre}{fecha_ingreso}{numeroHabitacion}"
    
    codigo_reserva = hashlib.md5(info_reserva.encode()).hexdigest()[:8]  # Usamos solo los primeros 8 caracteres del hash

    return codigo_reserva

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#FUNCIONES DE INGRESO 1.1 (validamos que los valores asignados por el cliente sea valido)

def verificar_nombre():
    
    while True:
        nombre = input(" ‚Ä¢ Nombre ‚ûû  ").capitalize()
        if nombre.isalpha(): #Retorna tru si todos los caracteres utilizados son letras
            return nombre
        else:
            print(" ---------------------------------------  ")
            print("        Error - ingres√≥ un n√∫mero       . ")
            print(" ---------------------------------------  ")

def verificar_apellido():
    
    while True:
        apellido = input(" ‚Ä¢ Apellido ‚ûû  ").capitalize()
        if apellido.isalpha(): #Retorna true si todos los caracteres utilizados son letras
            return apellido
        else:
            print(" ---------------------------------------  ")
            print("        Error - ingres√≥ un n√∫mero       . ")
            print(" ---------------------------------------  ")

def verificar_nacionalidad():

    while True:
        pais = input(" ‚Ä¢ Nacionalidad üåç ‚ûû  ").capitalize() #La primera letra la pone en mayuscula.
        if pais.isalpha(): #Retorna tru si todos los caracteres utilizados son letras
            return pais
        else:
            print(" ---------------------------------------  ")
            print("        Error - ingres√≥ un n√∫mero       . ")
            print(" ---------------------------------------  ")

def verificar_dni(nacionalidad):
    if nacionalidad == "Argentina":
        while True:
        
            dni = input(" ‚Ä¢ DNI ‚ûû  ")
            if dni.isdigit() and len(dni) == 8:#Retorna true si todos los caracteres utilizados son numero y tiene un largo de 8 numeros
    
            
                return dni
            else:
                print(" ----------------------------------------- ")
                print(" Error - No es ni un Pasaporte, ni un DNI. ")
                print(" ----------------------------------------- ")
    return None

def verificar_correo():
    while True:
        correo = input(" ‚Ä¢ Correo üìß ‚ûû  ")
        if correo.count("@") == 1 and correo.count(".") == 1:
            return correo
        else:
            print(" ----------------------------------------- ")
            print("     Error - No se ingreso un correo.      ")
            print(" ----------------------------------------- ")

def verificar_numero():
    while True:
        numero = input(" ‚Ä¢ Telefono üìû ‚ûû  ")
        if numero.isdigit(): #Retorna true si todos los caracteres utilizados son numero
            return numero
        else:
            print(" ----------------------------------------- ")
            print("    Error - No se ingreso un numero üìû.    ")
            print(" ----------------------------------------- ")

def verificar_fecha_ingreso():
    while True:
        try:
            ingreso = input(" ‚Ä¢ Fecha de Ingreso en formato (DD-MM-YYYY) ‚ûû  ").strip()

            # Convertir el input a un objeto datetime solo con fecha
            fecha_ingreso = datetime.strptime(ingreso, "%d %m %Y").date()
            
            # Obtener la fecha actual solo con fecha
            fecha_actual = datetime.now().date()
            
            if fecha_actual <= fecha_ingreso:
                return fecha_ingreso
            else:
                print("x La fecha ingresada es menor a la fecha actual. x")
        
        except ValueError:
            print(" ----------------------------------------- ")
            print("  Error - No se ingres√≥ una fecha v√°lida.  ")
            print(" ----------------------------------------- ")

def verificar_fecha_salida(fecha_ingreso):
    while True:
        try:
            salida = input(" ‚Ä¢ Fecha de Salida en formato (DD-MM-YYYY) ‚ûû  ").strip()
            
            # Imprimir salida para depuraci√≥n
            print("Fecha de salida ingresada:", salida)
            
            # Convertir el input a una fecha datetime solo con fecha
            fecha_salida = datetime.strptime(salida, "%d %m %Y").date()
            
            if fecha_ingreso <= fecha_salida:
                return fecha_salida
            else:
                print("x La fecha de salida es menor a la fecha de ingreso. x")
        
        except ValueError:
            print(" ----------------------------------------- ")
            print("  Error - No se ingres√≥ una fecha v√°lida.  ")
            print(" ----------------------------------------- ")


#------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------

from datetime import datetime

#--------------------------------------------------------------------------------------------------------------------------------------
#FUNCIONES DE PAGOS

#Funcion de subir valor dependiendo el mes de reserva
def ajustar_precio_por_temp(habitaciones, fecha_ingreso):
    """
    Ajusta los precios de las habitaciones seg√∫n el mes de ingreso del cliente.

    """
    fecha = datetime.strptime(fecha_ingreso, '%Y-%m-%d')
    mes = fecha.month
#CHE ESTO TIENE QUE SER *1.10 1.12 y asi tipo si se alquila de un mes a otro se tiene que multiplicar el valor mas un porcentaje 
    if 1 <= mes <= 3:
        porcentaje = 10  
    elif 4 <= mes <= 7:
        porcentaje = 5   
    elif 8 <= mes <= 12:
        porcentaje = 20  

    print(f"Ajustando precios con un incremento del {porcentaje}% para el mes {mes}.")

    # Ajustar los precios de las habitaciones
    for habitacion in habitaciones:
        incremento = habitacion["valor"] * (porcentaje / 100)
        habitacion["valor"] += int(incremento)  #que quede en entero
        print(f'Habitaci√≥n {habitacion["numeroHabitacion"]} - Nuevo precio: ${habitacion["valor"]}')

    
    actualizar_habitaciones(habitaciones)
    print("\nPrecios actualizados exitosamente.")
    return habitaciones

# Funcion pago total (queda pendiente)
#def pagoTotal():
habitaciones = cargar_habitaciones()
reservas = leer_reservas()
#------------------------------------------------------------------------------------------------------------------------------------
#VALIDAR SI LA USAMOS O HAY QUE RE ESCRIBIRLA

# def verificar_disponibilidad():
#     pass
                            
# def calcularDiasEstadia(diaIngreso, mesIngreso, diaSalida, mesSalida):
#     diasTotales = 0
#     # Contador de dias totales de estadia
#     if mesIngreso == mesSalida:
#         # Si el mes de ingreso y salida es el mismo, solo restamos los d√≠as
#         diasTotales = diaSalida - diaIngreso
#     else:
#         # D√≠as restantes en el mes de ingreso
#         diasRestantesMesIngreso = diasPorMes[mesIngreso] - diaIngreso
        
#         # D√≠as en el mes de salida
#         diasEnMesSalida = diaSalida
        
#         # D√≠as completos en los meses intermedios
#         diasIntermedios = 0
#         for mes in range(mesIngreso + 1, mesSalida):
#             diasIntermedios += diasPorMes[mes]

#         # Calculo de la estadia total sumando el mes de ingreso, el intermedio y el de salida.
#         diasTotales = diasRestantesMesIngreso + diasIntermedios + diasEnMesSalida
#     return diasTotales

# def verificar_disponibilidad():
#     pass

# def funcionEgreso(): # +1 al cuarto ocupado
#     pass

# def buscarResarvaPorNombre(): #con metodos buscar simmilitudes de nombres en el array de huespedes hat que hacerlo global
#     pass

# def buscarReservaPorNumero(): #con la variable global de la funcion funcionNumerocliente():
#     pass

#--------------------------------------------------------------------------------------------------------------------------------


#FUNCIONES QUE HAY QUE RE ESCRIBIR:

#def verificar_disponibilidad(habitaciones, numero_habitacion, fecha_ingreso, fecha_salida):
#--------------------------------------------------------------------------------------------------------------------------------

#Variables globales

habitaciones = cargar_habitaciones()
reservas = leer_reservas()


#-------------------------------------------------------------------------------------------------------------------------------
#Ejecucion del Programa 

menu() 
#-------------------------------------------------------------------------------------------------------------------------------
    
    
    #for habitacion in habitaciones:
      #  if habitacion['numeroHabitacion'] == numero_habitacion:
          #  for reserva in habitacion.get('reservas', []):
             #   fecha_entrada_reserva = datetime.strptime(reserva['fechaEntrada'], '%Y-%m-%d')
              #  fecha_salida_reserva = datetime.strptime(reserva['fechaSalida'], '%Y-%m-%d')

                # Verificar si las fechas se solapan
               # if not (fecha_salida <= fecha_entrada_reserva or fecha_ingreso >= fecha_salida_reserva):
                #    return False  # Hay una superposici√≥n, no est√° disponible
    #return True 